<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blibee.umbrella.dao.FeedbackMapper">
  <resultMap id="BaseResultMap" type="com.blibee.umbrella.model.pojo.Feedback">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="uid" jdbcType="BIGINT" property="uid" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="umbrella_number" jdbcType="VARCHAR" property="umbrellaNumber" />
    <result column="umbrella_cabinet_number" jdbcType="VARCHAR" property="umbrellaCabinetNumber" />
    <result column="lease_id" jdbcType="BIGINT" property="leaseId" />
    <result column="period" jdbcType="TINYINT" property="period" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="lease_type" jdbcType="VARCHAR" property="leaseType" />
    <result column="fault_type" jdbcType="VARCHAR" property="faultType" />
    <result column="solve_type" jdbcType="TINYINT" property="solveType" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.blibee.umbrella.model.pojo.Feedback">
    <result column="url" jdbcType="LONGVARCHAR" property="url" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, uid, content, umbrella_number, umbrella_cabinet_number, lease_id, period, state, 
    lease_type, fault_type, solve_type, create_time, update_time
  </sql>
  <sql id="Blob_Column_List">
    url
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.blibee.umbrella.model.pojo.FeedbackExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from feedback
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.blibee.umbrella.model.pojo.FeedbackExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from feedback
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from feedback
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from feedback
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.blibee.umbrella.model.pojo.FeedbackExample">
    delete from feedback
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.blibee.umbrella.model.pojo.Feedback">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into feedback (uid, content, umbrella_number, 
      umbrella_cabinet_number, lease_id, period, 
      state, lease_type, fault_type, 
      solve_type, create_time, update_time, 
      url)
    values (#{uid,jdbcType=BIGINT}, #{content,jdbcType=VARCHAR}, #{umbrellaNumber,jdbcType=VARCHAR}, 
      #{umbrellaCabinetNumber,jdbcType=VARCHAR}, #{leaseId,jdbcType=BIGINT}, #{period,jdbcType=TINYINT}, 
      #{state,jdbcType=TINYINT}, #{leaseType,jdbcType=VARCHAR}, #{faultType,jdbcType=VARCHAR}, 
      #{solveType,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{url,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.blibee.umbrella.model.pojo.Feedback">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into feedback
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        uid,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="umbrellaNumber != null">
        umbrella_number,
      </if>
      <if test="umbrellaCabinetNumber != null">
        umbrella_cabinet_number,
      </if>
      <if test="leaseId != null">
        lease_id,
      </if>
      <if test="period != null">
        period,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="leaseType != null">
        lease_type,
      </if>
      <if test="faultType != null">
        fault_type,
      </if>
      <if test="solveType != null">
        solve_type,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="url != null">
        url,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="umbrellaNumber != null">
        #{umbrellaNumber,jdbcType=VARCHAR},
      </if>
      <if test="umbrellaCabinetNumber != null">
        #{umbrellaCabinetNumber,jdbcType=VARCHAR},
      </if>
      <if test="leaseId != null">
        #{leaseId,jdbcType=BIGINT},
      </if>
      <if test="period != null">
        #{period,jdbcType=TINYINT},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
      <if test="leaseType != null">
        #{leaseType,jdbcType=VARCHAR},
      </if>
      <if test="faultType != null">
        #{faultType,jdbcType=VARCHAR},
      </if>
      <if test="solveType != null">
        #{solveType,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="url != null">
        #{url,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.blibee.umbrella.model.pojo.FeedbackExample" resultType="java.lang.Long">
    select count(*) from feedback
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update feedback
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=BIGINT},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.umbrellaNumber != null">
        umbrella_number = #{record.umbrellaNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.umbrellaCabinetNumber != null">
        umbrella_cabinet_number = #{record.umbrellaCabinetNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.leaseId != null">
        lease_id = #{record.leaseId,jdbcType=BIGINT},
      </if>
      <if test="record.period != null">
        period = #{record.period,jdbcType=TINYINT},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=TINYINT},
      </if>
      <if test="record.leaseType != null">
        lease_type = #{record.leaseType,jdbcType=VARCHAR},
      </if>
      <if test="record.faultType != null">
        fault_type = #{record.faultType,jdbcType=VARCHAR},
      </if>
      <if test="record.solveType != null">
        solve_type = #{record.solveType,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.url != null">
        url = #{record.url,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update feedback
    set id = #{record.id,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=BIGINT},
      content = #{record.content,jdbcType=VARCHAR},
      umbrella_number = #{record.umbrellaNumber,jdbcType=VARCHAR},
      umbrella_cabinet_number = #{record.umbrellaCabinetNumber,jdbcType=VARCHAR},
      lease_id = #{record.leaseId,jdbcType=BIGINT},
      period = #{record.period,jdbcType=TINYINT},
      state = #{record.state,jdbcType=TINYINT},
      lease_type = #{record.leaseType,jdbcType=VARCHAR},
      fault_type = #{record.faultType,jdbcType=VARCHAR},
      solve_type = #{record.solveType,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      url = #{record.url,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update feedback
    set id = #{record.id,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=BIGINT},
      content = #{record.content,jdbcType=VARCHAR},
      umbrella_number = #{record.umbrellaNumber,jdbcType=VARCHAR},
      umbrella_cabinet_number = #{record.umbrellaCabinetNumber,jdbcType=VARCHAR},
      lease_id = #{record.leaseId,jdbcType=BIGINT},
      period = #{record.period,jdbcType=TINYINT},
      state = #{record.state,jdbcType=TINYINT},
      lease_type = #{record.leaseType,jdbcType=VARCHAR},
      fault_type = #{record.faultType,jdbcType=VARCHAR},
      solve_type = #{record.solveType,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.blibee.umbrella.model.pojo.Feedback">
    update feedback
    <set>
      <if test="uid != null">
        uid = #{uid,jdbcType=BIGINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="umbrellaNumber != null">
        umbrella_number = #{umbrellaNumber,jdbcType=VARCHAR},
      </if>
      <if test="umbrellaCabinetNumber != null">
        umbrella_cabinet_number = #{umbrellaCabinetNumber,jdbcType=VARCHAR},
      </if>
      <if test="leaseId != null">
        lease_id = #{leaseId,jdbcType=BIGINT},
      </if>
      <if test="period != null">
        period = #{period,jdbcType=TINYINT},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="leaseType != null">
        lease_type = #{leaseType,jdbcType=VARCHAR},
      </if>
      <if test="faultType != null">
        fault_type = #{faultType,jdbcType=VARCHAR},
      </if>
      <if test="solveType != null">
        solve_type = #{solveType,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.blibee.umbrella.model.pojo.Feedback">
    update feedback
    set uid = #{uid,jdbcType=BIGINT},
      content = #{content,jdbcType=VARCHAR},
      umbrella_number = #{umbrellaNumber,jdbcType=VARCHAR},
      umbrella_cabinet_number = #{umbrellaCabinetNumber,jdbcType=VARCHAR},
      lease_id = #{leaseId,jdbcType=BIGINT},
      period = #{period,jdbcType=TINYINT},
      state = #{state,jdbcType=TINYINT},
      lease_type = #{leaseType,jdbcType=VARCHAR},
      fault_type = #{faultType,jdbcType=VARCHAR},
      solve_type = #{solveType,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      url = #{url,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.blibee.umbrella.model.pojo.Feedback">
    update feedback
    set uid = #{uid,jdbcType=BIGINT},
      content = #{content,jdbcType=VARCHAR},
      umbrella_number = #{umbrellaNumber,jdbcType=VARCHAR},
      umbrella_cabinet_number = #{umbrellaCabinetNumber,jdbcType=VARCHAR},
      lease_id = #{leaseId,jdbcType=BIGINT},
      period = #{period,jdbcType=TINYINT},
      state = #{state,jdbcType=TINYINT},
      lease_type = #{leaseType,jdbcType=VARCHAR},
      fault_type = #{faultType,jdbcType=VARCHAR},
      solve_type = #{solveType,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithBLOBsWithRowbounds" parameterType="com.blibee.umbrella.model.pojo.FeedbackExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from feedback
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleWithRowbounds" parameterType="com.blibee.umbrella.model.pojo.FeedbackExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from feedback
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>